#!/usr/bin/python3


### Script for ICA2: A Python3 workflow ###

### Import the necessary packages ###

import os, sys, subprocess, time, shutil

### NOTE_00_Details: We need store the current working directory of the user as a variable to ensure the user can run the programme from any directory and so that we can reference the folder we create from now on ###
### NOTE_00_STATUS: CLOSED ###

user_cwd = os.getcwd()

main_pwd_to_be_set= user_cwd + "/Python3_Programme_Files/"

os.mkdir(main_pwd_to_be_set)

os.chdir(main_pwd_to_be_set)

### NOTE_01_Details: Greet the User, display a list of what this program can do and what kind of inputs and outputs are part of this programme ###
### NOTE_01_STATUS: CLOSED ###

print("\n Welcome to the Python3 Programme \n")

time.sleep(2)

print(" This programme will require 2 inputs from the User and will process and generate outputs depending on the input\n")

time.sleep(3)

print(" Would you like to view what you will have to input and the list of outputs that will be generated?\n")

time.sleep(3)

print(" Type y if you wish to do so OR n if you don't want to/already know what this programme does\n")

time.sleep(3)

list_outputs_input = input(" What is your choice (y/n)? \t (y=yes and n=no)\n ").lower()

time.sleep(2)

### NOTE_02_Details: The function below will keep requesting for an input till the user inputs either y or n (either uppercase or lowercase) or yes or no and display the relevant message depending on the choice ###
### NOTE_02_STATUS: CLOSED ###

def choice_y_or_n(list_outputs):
    while True :
        if list_outputs == 'y' or list_outputs == 'yes':
            print("\n Here's the list of inputs required & outputs that will be generated \n")
            
            time.sleep(2)
            print(" Inputs: (All choices are in the format y/n) \t (Where y-=yes and n=no)")
            
            time.sleep(2)
            print("""
             Input Section: 
             Taxonomic Group 
             Protein Name,
             Choices to proceed or not (multiple)
                    """)
            
            time.sleep(3)
            print(""" 
             1st Processing Section:
             Choice to plot level of conservation of dataset protein sequences,
             winsize parameter to plot conservation level,
             choice to generate multiple images
                    """)
            
            time.sleep(3)
            print("""
             2nd Processing Section:
             Choice to begin search for motifs
                    """)
            
            time.sleep(3)
            print(" Outputs: ")

            time.sleep(2)
            print("""
             Input Section: 
             .txt file containing info about input taxon group,
             .txt file containing ordered list of number of individual species in the dataset,
             .fasta file of sequences in the dataset
                    """)
            
            time.sleep(5)
            print(""" 
             1st Processing Section: (Programs Used => Clustalo, Plotcon)
             .aln file containing multiple sequence alignment information of the sequences,
             .png images of level of conservation according to specified winsize (can be multiple)
                    """)

            time.sleep(5)
            print("""
             2nd Processing Section: (Programs Used => Patmatmotifs)
             Folder containing each individual sequence of the fasta file generate for the dataset
             Folder containing the output file of searching for motifs in each sequence
             .txt file containing the combined outputs of running patmatmotifs on all sequences in the dataset
             .txt file containing ordered list of number of motifs found for the dataset
             
             We also have a wildcard at the end which is a surprise :P

             """)
            time.sleep(5)


            break;
        elif list_outputs == 'n' or list_outputs == 'no':
            print("\n You have chosen not to list the inputs & outputs\n")
            break;
        else :
            print("\n Invalid choice: Please type y or n to proceed \n ")
            list_outputs = input(" What is your choice (y/n)? \t (y=yes and n=no) \n ").lower()


choice_y_or_n(list_outputs_input)


### NOTE_03_Details: Now we will take the inputs from the user and run functions to see if they are in the right format for each input  ###
### NOTE_03_STATUS: CLOSED ###

time.sleep(3)

print("\n The current working directory is ", main_pwd_to_be_set)

time.sleep(3)

print("\n For each dataset generated the corresponding output will be be stored in a folder named as follows: (protein_name)_(taxonomic_group)_files \n")

time.sleep(4)


while True:

    print("\n ### INPUT SECTION OF THE CODE ### \n")
    
    time.sleep(2)
     
    print("\n Welcome to the input section of the code where we generate the dataset that will be used in the processing stages that follow ")
    
    time.sleep(3)

    print("\n We require the protein to be searched for and the taxonomic group to be searched in as the 2 inputs\n")

    time.sleep(3)

    ### NOTE_04_Details: Now we will accept the input from the user for the taxonomic group that they want to search in and display some information regarding the closest match  ###
    ### NOTE_04_STATUS: CLOSED ###

    taxo_group = input(" What is the taxonomic group that you want to query in \n ").replace(" ","_").lower()

    time.sleep(2)

    def edirect_taxo_name(t_g):
        while True:
            if not t_g.isalpha():
                print("\n Please input a search string \n")
                time.sleep(2)
                t_g= input("\n What is the taxonomic group that you want to query in \n ").replace(" ","_").lower()

            else :
                esearch_command= (f"esearch -db taxonomy -query '{t_g}' | efetch -format xml |"
                                  f"xtract -pattern Taxon -sep '|' -element TaxId ScientificName GenbankCommonName Division > '{t_g}.txt'"
                                 )
        
                os.system(esearch_command)
        
                taxo_group_desc= f"{t_g}.txt"

                print(" \n This is the taxonomic group you have chosen and a few details about it.  \n")
                print("TaxId\tScientificName\tGenbankCommonName\tDivision \n")
                
                with open(taxo_group_desc, 'r') as file:
                    content = file.read()
                    print(content)

                return t_g
                break;


    taxo_group= edirect_taxo_name(taxo_group)

    ### print(" ",taxo_group) ### Used to gauge the result ### 

    ### NOTE_05_Details: Now we will ask the user if they want to proceed to the next input i.e. the protein to be searched for ###
    ### NOTE_05_STATUS: CLOSED ###
    
    time.sleep(2)

    print("\n WARNING! Choosing n=no for the next choice will terminate the program \n")
    
    time.sleep(2)

    choice_2_proceed = input(" Shall we proceed to input the protein (y/n)? \t (y=yes and n=no) \n ").lower()
    
    
    def choice_y_or_n2(list_outputs_2):
        while True :
            if list_outputs_2 == 'y' or list_outputs_2 == 'yes':
                print("\n You have chosen to proceed\n")
                break;
            elif list_outputs_2 == 'n' or list_outputs_2 == 'no':
                print("\n You have chosen not to proceed\n")
                time.sleep(2)
                sys.exit(" Terminating program, This is goodbye ;_; \n")
                break;
            else :
                print("\n Invalid choice: Please type y or n to proceed\n")
                time.sleep(2)
                list_outputs_2 = input(" What is your choice (y/n)? \t (y=yes and n=no) \n ").lower()


    choice_y_or_n2(choice_2_proceed)


    ### NOTE_06_Details: Now we will accept the input from the user for the protein that they want to search for ###
    ### NOTE_06_STATUS: CLOSED ###
    
    time.sleep(3)

    protein_sequence = input("\n What is the protein that you want to query with \n ").replace(" ","_").lower()
    

    def edirect_pro_seq(pro_seq):
        while True:
            if pro_seq.isdigit() :
                print("\n Please input a search string, not just numbers \n")
                time.sleep(2)
                pro_seq= input("\n  What is the protein sequence that you want to query with \n ").replace(" ","_").lower()

            else : 
                print("\n The protein that you have chosen to query with is ", pro_seq)
                return pro_seq
                break;

    protein_sequence = edirect_pro_seq(protein_sequence)


    ### print("\n ",protein_sequence," \n")  ### Used to gauge the result ###

    time.sleep(2)

    print("\n The input taxonomic group is ",taxo_group," & the input protein is ",protein_sequence, "\n")

    time.sleep(3)

    ### NOTE_07_Details: Now we will take the inputs and check the number of sequences that will be returned when we do the esearch command, we will also keep a limit on the maximum allowable sequences to 1000 as it will be very time consuming ###
    ### NOTE_07_STATUS: CLOSED ###

    print(" Before we proceed to view the list of species that will be obtained for the inputs we first need to check what the total number of sequences obtained is \n")

    time.sleep(2)

    print(" This is crucial because if we exceed 1000 sequences it will be very time consuming. So the maximum allowable sequences limit is set to 1000 \n")

    time.sleep(3)

    print(" We also cannot do alignment with just 1 or 0 sequences, so in these scenarios we need to generate new dataset \n")

    time.sleep(3)

    total_sequence_command  = (f"esearch -db protein -query '{protein_sequence}[Protein] AND {taxo_group}[Organism] NOT PARTIAL' |"
                              f"xtract -pattern Count -element Count"
                              )

    total_value = int(subprocess.run(total_sequence_command, shell=True, capture_output=True, text=True).stdout.strip())
    
    total_count_check = False

    if total_value == 0 or total_value == 1:
        print(" Insufficient number of sequences to proceed to processing stage.\n ")
        time.sleep(2)
        print(" Number of sequences obtained: ", total_value,"\n")
        time.sleep(2)
        print(" Please generate a new dataset with different inputs to proceed \n")
        time.sleep(3)
        print(" Your current inputs were ", taxo_group, " & ", protein_sequence, "for reference\n")
        time.sleep(3)
        print(" Sending you back in time to provide the inputs again \n")
        time.sleep(3)
        total_count_check = True
        continue
    elif total_value == 1000 or total_value > 1000:
        total_value = 1000

    time.sleep(2)

    if total_count_check:
        break;


    print("\n The number of sequences obtained was: ", total_value)

    ### NOTE_08_Details: Now we will take the inputs and generate a file using esearch, efetch and xtract to get a ordered list of species sorted in descending order of their frequency   ###
    ### NOTE_08_STATUS: CLOSED ###
    
    time.sleep(2)

    print("\n WARNING! Choosing n=no for the next choice will terminate the program \n")

    time.sleep(3)

    choice_2_proceed_2 = input("\n Shall we proceed to view the list of species which contains our protein (y/n)? \t (y=yes and n=no) \n ").lower()

    choice_y_or_n2(choice_2_proceed_2)

    print("\n If there were close to 1000 sequences this might take a while .... You might want to get some coffee... \n")

    esearch_command_list =(f"esearch -db protein -query '{protein_sequence}[Protein] AND {taxo_group}[Organism] NOT PARTIAL' |"
                           f"efetch -format docsum -start 1 -stop '{total_value}' |"
                           f"xtract -pattern DocumentSummary -element Organism | sort | uniq -c | sort -nr > '{protein_sequence}_{taxo_group}.txt'"
                           )

    subprocess.run(esearch_command_list, shell=True, capture_output=True, check=True)

    file_sequences_list = f"{protein_sequence}_{taxo_group}.txt"

    print ("\n This is the ordered list of species which contain the input protein sorted in descending order of their frequency \n")

    with open(file_sequences_list, 'r') as file:
        print(file.read())

    print("\n This is the ordered list of species which contain the input protein sorted in descending order of their frequency \n")

    time.sleep(2)
    
    print(f"\n The list is stored in '{protein_sequence}_{taxo_group}.txt' \n")


    ### NOTE_09_Details: Generate the fasta file which we will need for the further processing stages. Futher, asking the user if they are satisfied with the dataset that was displayed and giving them the option to go back to the input section if they wish to. Files will be deleted as per the choice of the user ###
    ### NOTE_09_STATUS: OPEN ###

    time.sleep(4)

    print("\n A fasta file will now be generated for the specified inputs, which will be used for further processing \n")

    print("\n Processing.....Processing.....Processing \n")

    gen_fasta_file =(f"esearch -db protein -query '{protein_sequence}[Protein] AND {taxo_group}[Organism] NOT PARTIAL' |"
                     f"efetch -format fasta -start 1 -stop '{total_value}' > '{protein_sequence}_{taxo_group}.fasta'"
                     )
    
    os.system(gen_fasta_file)

    print(f"\n The name of the fasta file is '{protein_sequence}_{taxo_group}.fasta' \n")
    
    time.sleep(2)

    print("\n Is the current dataset acceptable? Would you like to continue to the processing stages or go back to the input stage and generate a new dataset \n")

    time.sleep(4)
    

    ### NOTE_10_Details: Ask the user if they are satisfied with the current dataset, give them option to generate a new one ###
    ### NOTE_10_STATUS: CLOSED ###

    print(" Choices: y/yes= Continue with the current dataset ; n/no means you want to generate a new dataset \n")

    time.sleep(3)

    def choice_y_or_n3():
        while True :
            new_dataset_or_not = input("\n Shall we proceed to the processing stages with the current dataset (y/n)? \t (y=yes and n=no) \n ").lower()

            if new_dataset_or_not == 'y' or new_dataset_or_not == 'yes':
                print(" You have chosen to proceed with the current dataset\n")
                return True
            elif new_dataset_or_not == 'n' or new_dataset_or_not == 'no':
                print(" You have chosen not to proceed with the current dataset\n")
                time.sleep(2)
                print(" Your current inputs were ", taxo_group, " & ", protein_sequence, "for reference\n")
                time.sleep(3)
                print(" Time to generate a new dataset \n")
                return False
            else :
                print(" Invalid choice: Please type y or n to proceed\n")
                new_dataset_or_not = input(" What is your choice (y/n)? \t (y=yes and n=no) \n ").lower()
    
    
    
    if choice_y_or_n3():
        break;
    else:
        print("\n Time to go back in time to the input section \n")
        time.sleep(4)
    
    ### print(" Testing if we are looping/exiting the input section of the code properly")


### NOTE_11_Details: Moving into the main processing stages. We will begin by first determining and plotting the level of conservation, we will be using clustalo to perform the clustering and multiple sequence alignment. Plotcon will generate a similarity plot of aligned sequences ###
### NOTE_11_STATUS: CLOSED ###

### special parameters used
### --full => we want full distance matrix evaluation
### --full-iter => iteration will be done in full mode not mBed mode (more acurate)
### --iter=1 => number of iteration will be one so we can use kimura corrections
### --use-kimura => applying kimura corrections on the protein sequences for a more accurate representation of evolutionary distance
### --outfmt=fa => output will be in fasta format
### --threads=100 => to run the process on 100 threads
### -v -v => command-line flags (explicitly and implicitly set) are printed in addition to the progress report


### create a new directory for the current dataset, move all the files into this new directory and change the current working directory to the new one ###

source_folder_cwd= os.getcwd()

new_wd_destination = os.path.join(source_folder_cwd, f"{protein_sequence}_{taxo_group}_files")

os.mkdir(new_wd_destination)

print("\n A new working directory called ", new_wd_destination, " has been created \n")

time.sleep(3)

print("\n All files will be moved to the new directory and it will be set as the new current working directory for the upcoming stages \n")

time.sleep(4)

### moving all the files ###

files_to_be_moved=[f"{protein_sequence}_{taxo_group}.txt", f"{protein_sequence}_{taxo_group}.fasta",f"{taxo_group}.txt"]



for file_name in files_to_be_moved:
    source = os.path.join(source_folder_cwd, file_name)
    destination = os.path.join(new_wd_destination, file_name)

    if os.path.isfile(source):
        shutil.move(source, destination)
        print(" Moved: ", file_name,"\n")
    else:
        print(f" File not found: {file_name}")


print("\n All the files have been moved \n")

os.chdir(new_wd_destination)




### Move into the processing stages ###

print("\n ### PROCESSING SECTION OF THE CODE: Level of conservation between the protein sequences ### \n")

time.sleep(4)

print("\n Welcome to the Processing stages where we will have some interesting outputs and inferences \n")

time.sleep(4)

print("\n We will first determine and plot the level of conservation of the dataset protein sequences ")

time.sleep(4)

print("\n We will be using Clustal Omega (aka clustalo) to both cluster and perform multiple sequence alignment on the dataset protein sequences \n")

time.sleep(5)

print("\n Here we go ... Initiating alignment ... \n")

time.sleep(3)

clustalo_command= f"clustalo -i '{protein_sequence}_{taxo_group}.fasta' --full --full-iter --iter=1 --use-kimura -o '{protein_sequence}_{taxo_group}_alignment_fasta.aln' --outfmt=fa --force --threads=100 -v -v"

os.system(clustalo_command)

time.sleep(3)

print(f"\n The output file is '{protein_sequence}_{taxo_group}_alignment_fasta.aln' \n")



### NOTE_12_Details: Give the user the option to generate plots of the level of conservation using plotcon according to the winsize of their specification, put this in a loop to reiterate till the are satisfied ###
### NOTE_12_STATUS: CLOSED ###

### special parameters used for plotcon
### -graph -png => to get the output as an image which can be viewed
### -winsize 'winsize_input_user' => gives the user the option to choose winsize
### -auto => Turns off prompts


time.sleep(3)

print("\n Let's now plot the level of conservation for the aligned sequences using plotcon \n")

time.sleep(3)

print("\n To do this we have given you the option to choose the winsize \n")

time.sleep(3)

print("\n A large window (e.g. 100) gives a nice, smooth curve, and very low 'similarity score' units, whereas a small window (e.g. 4) gives a very spikey, noisy plot with 'similarity score' units of a round 1.00 \n")

time.sleep(4)


### This function will take the user input winsize and use it's value in the -winsize parameter of plotcon ###

def user_input_winsize():
    while True:
        try:
            winsize_input_user= input("\n What is the winsize you want to choose? (please input an integer value) \n ").replace(" ","")
            winsize_input= int(winsize_input_user)
            time.sleep(3)
            print(f" You have chosen a winsize of '{winsize_input}' \n")
            return winsize_input
        except ValueError:
            print(" Invalid input, please enter an integer \n")
            time.sleep(3)


### This function enables the user to generate as many plots with different winsizes for the current dataset as desired for maybe comparison with another dataset maybe ###

from matplotlib import pyplot as plt
from matplotlib import image as mpimg

def plotcon_multiple_plots():
    while True:
        
        plot_or_not= input("\n Shall we plot the level of conservation for these sequences (y/n)?  \t (y=yes and n=no) \n ").lower()
        
        if plot_or_not  == 'y' or plot_or_not == 'yes':

            winsize_input_user= user_input_winsize()             

            print("\n You have chosen to proceed\n")
             
            plotcon_command= (f"plotcon -sequences '{protein_sequence}_{taxo_group}_alignment_fasta.aln' -winsize '{winsize_input_user}' -graph png -goutfile '{protein_sequence}_{taxo_group}_alignment_fasta_{winsize_input_user}.aln' --auto"
                              )

            os.system(plotcon_command)

            output_image= f"{protein_sequence}_{taxo_group}_alignment_fasta_{winsize_input_user}.aln.1.png"

            print(f"\n The image that has been generated is '{output_image}' \n")

            time.sleep(3)

            print("\n A beautiful graph is headed your way! Make sure to close it once you have finished viewing to continue with the Programme \n")

            time.sleep(3)

            print("\n Don't worry about the plots, we are saving each and every one of them that you create \n")

            time.sleep(3)

            print("\n Please give it a few seconds, the plot is loading ... \n")

            
            image = mpimg.imread(output_image)

            plt.imshow(image)

            plt.axis('off')

            plt.show()

            print(f"\n The plot has been saved as '{output_image}' \n")

            time.sleep(4)

            while True:
                more_plots= input("\n Do you want to generate another image with a different winsize (y/n)? \t (y=yes and n=no) \n ").lower()

                if more_plots in ['n','no']:
                    print("\n You have decided not to generate another image \n")
                    time.sleep(2)
                    return
                elif more_plots in ['y','yes']:
                    print("\n You have decided to generate another image \n")
                    time.sleep(2)
                    break
                else:
                    print("\n Invalid choice: Please type y or n to proceed \n")

        elif plot_or_not == 'n' or plot_or_not == 'no':
            print("\n You have chosen not to plot the level of conservation. Moving to next stage \n")
            time.sleep(5)
            break;
        else :
            print("\n Invalid choice: Please type y or n to proceed\n")
            time.sleep(2)


time.sleep(3)

plotcon_multiple_plots()

time.sleep(3)

print("\n I hope you liked the images that were generated !!! \n")

time.sleep(3)

### NOTE_13_Details: Time to find if the dataset sequences have any motifs of interest that are present in the PROSITE database ###
### NOTE_13_STATUS: CLOSED ###

print("\n ### PROCESSING SECTION OF THE CODE: Scanning for Motifs in the protein sequences ### \n")

time.sleep(4)

print("\n Welcome to the Motif searching section of this Programme \n")

time.sleep(3)

print(" We will be searcing for motifs in the PROSITE database using the sequences in the dataset\n")

time.sleep(3)

print(" Are you ready to do some motif searching ? \n")

time.sleep(2)

print("\n WARNING! Choosing n=no for the next choice will terminate the program \n")

time.sleep(2)

choice_2_proceed_prosite = input(" Shall we proceed to search for the motifs (y/n)? \t (y=yes and n=no) \n ").lower()

# Calling a function asking the user if they want to proceed ###

choice_y_or_n2(choice_2_proceed_prosite)

time.sleep(3)

# Create directory for searching motifs from PROSITE db

current_wd = os.getcwd()
dir_for_prosite = current_wd + "/motifs_search_PROSITE_db"
os.mkdir(dir_for_prosite)
os.chdir(dir_for_prosite)

# Move fasta file to new working dir

fasta_file_name = (f"{protein_sequence}_{taxo_group}.fasta")

print("\n The fasta file we will be using to scan is ", fasta_file_name)

time.sleep(3)

fasta_file_location = os.path.join(current_wd, fasta_file_name)
destination_file_location = os.path.join(dir_for_prosite, fasta_file_name)

shutil.copy(fasta_file_location, destination_file_location)
print("\n Fasta File copied successfully to be used for searching \n")

time.sleep(3)

# Create directories for the files being created

fasta_dir = f"{protein_sequence}_{taxo_group}_individual_fasta_files"  # Corrected
os.mkdir(fasta_dir)

patmatmotif_dir = "patmatmotif_outputs"
os.mkdir(patmatmotif_dir)

# Store the content of the input fasta file into a variable
fasta_file_name = f"{protein_sequence}_{taxo_group}.fasta"

if not os.path.exists(fasta_file_name):
    print(f"File {fasta_file_name} not found.")
    exit(1)

with open(fasta_file_name) as my_file:
    fasta_file_contents = my_file.read()

# Split the content into separate sequences and store as a list
list_fasta_seqs = [">" + seq for seq in fasta_file_contents.split(">") if seq]

# Create a file for each element of the list i.e., for each sequence
for i, seq in enumerate(list_fasta_seqs, start=1):
    file_path = os.path.join(fasta_dir, f"seq_{i}.fasta")
    with open(file_path, "w") as output_file:
        output_file.write(seq)

print(f"\n All the fasta files have been stored in {fasta_dir}\n")

time.sleep(3)

print("\n Time to start the search ... Hold on to your seat ... This is fast and furious ... \n")

time.sleep(4)

# Running patmatmotif on each fasta file
for file in os.listdir(fasta_dir):
    if file.endswith(".fasta"):
        individual_fasta_file_path = os.path.join(fasta_dir, file)
        output_file_path = os.path.join(patmatmotif_dir, f"{file}.patmatmotifs")
        try:
            subprocess.run(f"patmatmotifs -sequence {individual_fasta_file_path} -full -outfile {output_file_path}", shell=True)
        except:
            print("\n Uh-Oh, something is wrong ")

print(f"\n All the patmatmotif files have been stored in {patmatmotif_dir}\n")

time.sleep(3)

# Combining all patmatmotifs output files into one
combined_output_filename = f"{protein_sequence}_{taxo_group}_combined_patmatmotifs_results.txt"

with open(combined_output_filename, "w") as combined_file:
    for output_filename in os.listdir(patmatmotif_dir):
        if output_filename.endswith(".patmatmotifs"):
            output_file_path = os.path.join(patmatmotif_dir, output_filename)
            with open(output_file_path, "r") as output_file:
                combined_file.write(output_file.read() + "\n")

print(f"\n All patmatmotif results are combined into {combined_output_filename}\n")

time.sleep(3)

# Search, count, and list the motifs found from the sequences in descending order of frequency
output_file_name = f"motifs_present_in_{protein_sequence}_{taxo_group}.txt"
bash_command = f"grep 'Motif' {combined_output_filename} | cut -d'=' -f2 | sort | uniq -c | sort -nr > {output_file_name}"

# Run the command using subprocess
subprocess.run(bash_command, shell=True)

print(f"\n Motifs present have been successfully extracted and saved to '{output_file_name}' \n")

time.sleep(3)

print(f"\n These are the motifs that were present in our database: \n")


with open(output_file_name,"r") as file:
    print(file.read() + "\n")



### NOTE_14_Details: We will now run a programme from the EMBOSS suite which has some biological relevance to our dataset. The name of the programme is backtranseq. It reads a protein sequence and writes the nucleic acid sequence it is most likely to have come from. ###
### NOTE_14_STATUS: CLOSED ###


print("\n When we run backtranseq on our dataset we get nucleic acid sequences that the proteins in our sequences most likely came from \n")

time.sleep(5)

backtranseq_command=(f"backtranseq -sequence '{protein_sequence}_{taxo_group}.fasta' -cfile Ehuman.cut -outfile '{protein_sequence}_{taxo_group}_nucleotide.txt'")


os.system(backtranseq_command)

time.sleep(2)

print("\n Process Completed \n")

print(f"\n The file containing the result is stored in {protein_sequence}_{taxo_group}_nucleotide.txt', if you want to view it\n")

time.sleep(4)


### END OF PROCESSING STAGES ###

print("""
        Final Message:
        We have come to the END OF THIS PROGRAMME.
        I hope you have gained some useful output from this programme.
        Please view the outputs generated again if you wish to do so.
        Thank you for trying this programme, refer the help manual for more information on how to best run this programme.
        Fin.
         """)

### END OF THE PROGRAMME, GOODBYE ###





